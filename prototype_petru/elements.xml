<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="Elements"
		description="A simple note taking widget developed during Dev8eD. No realtime synch involved yet."
		author="Your Name"
		author_email="Your Email"
		height="300">
  	<Require feature="opensocial-0.8" />
    <Require feature="openapp" />
    <OAuth>
		<Service name="openapp" xmlns:openapp="http://www.role-project.eu/xml/openapp/opensocialext/" 
			openapp:service="http://purl.org/role/terms/spaceService"
			openapp:permitReadAppend="http://purl.org/role/terms/data">
			<Request method="" url=""/>
			<Authorization url=""/>
			<Access method="" url=""/>
		</Service>
    </OAuth>
  </ModulePrefs>
  <Content type="html">
    <![CDATA[
		
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
		<script src="http://dbis.rwth-aachen.de/gadgets/iwc/lib/iwc.js"></script>
        <link href="css/bootstrap.css" rel="stylesheet">
        <link href="http://getbootstrap.com/dist/css/bootstrap.min.css" rel="stylesheet" type="text/css"/>
        
             <style>
             
             
             #linearBg1 {
             /* fallback */
             background-color: #f0ad4e;
             background-repeat: repeat-y;
             
             /* Safari 4-5, Chrome 1-9 */
             background: -webkit-gradient(linear, left top, right top, from(#f0ad4e), to(#5cb85c));
             
             /* Safari 5.1, Chrome 10+ */
             background: -webkit-linear-gradient(left, #5cb85c, #f0ad4e);
             
             /* Firefox 3.6+ */
             background: -moz-linear-gradient(left, #5cb85c, #f0ad4e);
             
             /* IE 10 */
             background: -ms-linear-gradient(left, #5cb85c,#f0ad4e);
             
             /* Opera 11.10+ */
             background: -o-linear-gradient(left, #5cb85c, #f0ad4e);
             }
             

             </style>
		
		<!-- JavaScript Block -->
		<script>
			
			var space;
			var user;
			var iwcClient;
            var parentWidget="";
            var parentMicro="";
            var tempParentMicro="";
            var tempParentWidget="";
            var editVariable=new Boolean(0);
            var editTrigger=new Boolean(0);
            var selectedElementID="";
			
			gadgets.util.registerOnLoadHandler(init);
			
			function init(){
				console.log("Widget loaded");
				
				space = new openapp.oo.Resource(openapp.param.space());
				user = new openapp.oo.Resource(openapp.param.user());
				
				space.getInfo(function(info) {
					var spacename = info[openapp.ns.dcterms + "title"];
					
				});
				
				user.getInfo(function(info) {
					var username = info[openapp.ns.dcterms + "title"];
					//document.getElementById("uname").innerHTML = username;
				});
				
				iwcClient = new iwc.Client()
				iwcClient.connect(iwcCallback);
				
				renderNotes();
			}
			
			function iwcCallback(intent){
				console.log("Template: Received intent");
				console.log(intent);
				
				if (intent.action == "ACTION_UPDATE" && 
					intent.extras.ns == "my:ns:note"){
					window.location.reload();
				}
             
             if (intent.action == "WIDGET_SELECT") {
             //if(intent.sender.indexOf("@") > -1){
             //alert (intent.extras.username + intent.extras.password);
             parentWidget=intent.extras.widgetID;
             parentMicro="";
             document.getElementById("parentWidget").innerHTML=parentWidget;
             document.getElementById("parentMicro").innerHTML="All";
             updateRender(parentWidget);
             closeEditMode();
             
             //	}
             }
             
             if (intent.action == "MICRO_SELECT") {
             //if(intent.sender.indexOf("@") > -1){
             //alert (intent.extras.username + intent.extras.password);
             
             parentMicro=intent.extras.microID;
             parentWidget=intent.extras.parentWidget;
             
             if(parentWidget==""){
                document.getElementById("parentWidget").innerHTML="No Parent Widget";
             }
             
             else{
             document.getElementById("parentWidget").innerHTML=parentWidget;
             }
             
             document.getElementById("parentMicro").innerHTML=parentMicro;
             updateRender(parentMicro);
             closeEditMode();
             
             //	}
             }
             
             if (intent.action == "WIDGET_CHANGE") {
             document.getElementById("parentWidget").innerHTML=intent.extras.changedTo;
             updateParentWidget(intent.extras.changedWidget,intent.extras.changedTo);
             parentWidget=intent.extras.changedTo;
             //alert(intent.extras.changedWidget+" to "+intent.extras.changedTo);
             //updateRender(intent.extras.changedTo);
             //updateMicroList(parentMicro);
             closeEditMode();
             }
             
             if (intent.action == "WIDGET_REMOVE") {
             document.getElementById("parentWidget").innerHTML=intent.extras.changedTo;
             updateParentWidget(intent.extras.changedWidget,intent.extras.changedTo);
             parentWidget=intent.extras.changedTo;
             //alert(intent.extras.changedWidget+" to "+intent.extras.changedTo);
             //updateRender(intent.extras.changedTo);
             //updateMicroList(parentMicro);
             closeEditMode();
             }

             
             if (intent.action == "MICRO_CHANGE") {
             document.getElementById("parentMicro").innerHTML=intent.extras.changedTo;
             document.getElementById("parentWidget").innerHTML=intent.extras.newParentWidget;
             updateParentMicro(intent.extras.changedMicro,intent.extras.changedTo,intent.extras.newParentWidget);
             parentMicro=intent.extras.changedTo;
             parentWidget=intent.extras.newParentWidget;
             //alert(intent.extras.changedWidget+" to "+intent.extras.changedTo);
             //updateRender(intent.extras.changedTo);
             //updateMicroList(parentMicro);
             closeEditMode();
             }
             
             if (intent.action == "MICRO_ADD") {
             parentMicro=innerHTML=intent.extras.addedMicro;
             parentWidget=intent.extras.parentWidget;
             
             if(intent.extras.parentWidget!=""){
             document.getElementById("parentWidget").innerHTML=intent.extras.parentWidget;
             }
             
             else if(intent.extras.parentWidget==""){
             document.getElementById("parentWidget").innerHTML="No Parent";
             }
             document.getElementById("parentMicro").innerHTML=intent.extras.addedMicro;
             
             
             updateRender(parentMicro);
             closeEditMode();
             }
             
             if (intent.action == "WIDGET_REMOVE") {
             document.getElementById("parentWidget").innerHTML="All";
             document.getElementById("parentMicro").innerHTML="All";
             renderNotes();
             closeEditMode();
             }

             if (intent.action == "MICRO_REMOVE") {
             document.getElementById("parentWidget").innerHTML="All";
             document.getElementById("parentMicro").innerHTML="All";
             renderNotes();
             closeEditMode();
             }

             
             
             
			}
			
			function addTrigger(){
             
             if(document.getElementById("note").value==""){
             $("#statusMessage").html('Enter a trigger ID');
             $("#statusMessage").fadeIn();
             $("#statusMessage").fadeOut(3000);
             
             }
             
             else if(document.getElementById("elementTag").value==""||document.getElementById("elementTag").value==null){
             $("#statusMessage").html('Select an element tag');
             $("#statusMessage").fadeIn();
             $("#statusMessage").fadeOut(3000);
             
             }
             
             
             
             else{
             var triggerNote = {"text":document.getElementById("note").value,
             "elementTag":document.getElementById("elementTag").value,
             "parentWidget":parentWidget,
             "parentMicro":parentMicro,
             "elementType":"trigger element"
             };
             
                    space.create({
                        relation: openapp.ns.role + "data",
                        type: "my:ns:triggerNote" ,
                        representation: triggerNote,
                        callback: function(sub){
                        publishResourceUpdate(sub.uri);
                        if(sub.uri!=null){
                                 if(parentMicro==""&&parentWidget==""){
                                 renderNotes();
                                 }
                                 
                                 else if(parentMicro!=""){
                                 updateRender(parentMicro);
                                 }
                                 
                                 else if(parentMicro==""&&parentWidget!=""){
                                 updateRender(parentWidget);
                                 }

                        document.getElementById("note").value="";
                        //window.location.reload();
                            }
                                 }
                        });
             
           }
             
            }
            
            function addVariable(){
             
             if(document.getElementById("note").value==""){
             $("#statusMessage").html('Enter a variable ID');
             $("#statusMessage").fadeIn();
             $("#statusMessage").fadeOut(3000);
             
             }
             
             
            else if(document.getElementById("elementTag").value==""||document.getElementById("elementTag").value==null){
             $("#statusMessage").html('Select an element tag');
             $("#statusMessage").fadeIn();
             $("#statusMessage").fadeOut(3000);
             }
             
            else{
            var variableNote = {"text":document.getElementById("note").value,
                                "elementTag":document.getElementById("elementTag").value,
                                "parentWidget":parentWidget,
                                "parentMicro":parentMicro,
                                "elementType":"variable element"
                                };
            
            space.create({
            relation: openapp.ns.role + "data",
            type: "my:ns:variableNote",
            representation: variableNote,
            callback: function(sub){
            publishResourceUpdate(sub.uri);
                         if(sub.uri!=null){
                         if(parentMicro==""&&parentWidget==""){
                         renderNotes();
                         }
                         
                         else if(parentMicro!=""){
                         updateRender(parentMicro);
                         }
                         
                         else if(parentMicro==""&&parentWidget!=""){
                         updateRender(parentWidget);
                         }

                         document.getElementById("note").value="";
                         //window.location.reload();
                         }
            }
            });
             
            }
            
            }
			
             function updateTrigger(){
             
             //alert($("#microserviceList option:selected").attr("parentWidget")+" "+$("#microserviceList option:selected").attr("parentMicro"));
             
             var changedTo=document.getElementById("note").value;
             
             publishTriggerChangeMessage(selectedElementID, changedTo, $("#microserviceList option:selected").attr("parentWidget"),$("#microserviceList option:selected").attr("parentMicro"));
             //edit microservice
             
             var newRepresentation = {"text":document.getElementById("note").value,
                                    "elementTag":document.getElementById("elementTag").value,
                                    "parentWidget":$("#microserviceList option:selected").attr("parentWidget"),
                                    "parentMicro":$("#microserviceList option:selected").attr("parentMicro"),
                                    "elementType":"trigger element"};
             
             space.getSubResources({
                                   
                                   relation: openapp.ns.role + "data",
                                   type: "my:ns:triggerNote",
                                   //callback: window.location.reload();,
                                   onEach: function(triggerNote) {
                                   triggerNote.getRepresentation("rdfjson",function(r){
                                                               
                                                               if(selectedElementID==r.text){
                                                               
                                                               //alert("Editing " +r.text);
                                                               triggerNote.setRepresentation(newRepresentation);
                                                               
                                                                 if(parentMicro==""&&parentWidget==""){
                                                                 renderNotes();
                                                                 }
                                                                 
                                                                 else if(parentMicro!=""){
                                                                 updateRender(parentMicro);
                                                                 }
                                                                 
                                                                 else if(parentMicro==""&&parentWidget!=""){
                                                                 updateRender(parentWidget);
                                                                 }
                                                                 
                                                                 
                                                                 
                                                                 closeEditMode();
                                                               
                                                               }
                                                               });
                                   }
                                   //window.location.reload();
                                   
                                   });
             
             //var resource = new openapp.oo.Resource("http://role-sandbox.eu/spaces/edittest/z1kgGqaQ1_");
             

             }
             
             
             function updateVariable(){
             
             //alert($("#microserviceList option:selected").attr("parentWidget")+" "+$("#microserviceList option:selected").attr("parentMicro"));
             
             //edit microservice
             var newRepresentation = {"text":document.getElementById("note").value,
             "elementTag":document.getElementById("elementTag").value,
             "parentWidget":$("#microserviceList option:selected").attr("parentWidget"),
             "parentMicro":$("#microserviceList option:selected").attr("parentMicro"),
             "elementType":"variable element"};
             
             space.getSubResources({
                                   
                                   relation: openapp.ns.role + "data",
                                   type: "my:ns:variableNote",
                                   //callback: window.location.reload();,
                                   onEach: function(variableNote) {
                                   variableNote.getRepresentation("rdfjson",function(r){
                                                                 
                                                                 if(selectedElementID==r.text){
                                                                 
                                                                 //alert("Editing " +r.text);
                                                                 variableNote.setRepresentation(newRepresentation);
                                                                 
                                                                 if(parentMicro==""&&parentWidget==""){
                                                                 renderNotes();
                                                                 }
                                                                 
                                                                 else if(parentMicro!=""){
                                                                 updateRender(parentMicro);
                                                                 }
                                                                 
                                                                 else if(parentMicro==""&&parentWidget!=""){
                                                                 updateRender(parentWidget);
                                                                 }
                                                                 
                                                                 
                                                                 
                                                                 closeEditMode();
                                                                 
                                                                 }
                                                                 });
                                   }
                                   //window.location.reload();
                                   
                                   });
             
             //var resource = new openapp.oo.Resource("http://role-sandbox.eu/spaces/edittest/z1kgGqaQ1_");
             
             
             }
             
             
             function updateParentWidget(changedWidget,changedTo){
             
             //$('#elementList').empty();
             
             space.getSubResources({
                                   
                                   relation: openapp.ns.role + "data",
                                   type: "my:ns:triggerNote",
                                   //callback: window.location.reload();,
                                   onEach: function(triggerNote) {
                                   triggerNote.getRepresentation("rdfjson",function(r){
                                                               
                                                               
                                     var newRepresentation = {"text":r.text,
                                                               "parentWidget":changedTo,
                                                               "microType":r.microType,
                                                               "elementTag":r.elementTag,
                                                               "parentMicro":r.parentMicro,
                                                               "elementType":r.elementType};
                                                                 
                                                               if(changedWidget==r.parentWidget){
                                                               //alert(r.text+" in "+changedWidget+" to "+changedTo);
                                                               triggerNote.setRepresentation(newRepresentation);
                                                                 
                                                               //microNote.del();
                                                               
                                                               }
                                                               });
                                   }
                                   //window.location.reload();
                                   
                                   });
             
             
             space.getSubResources({
                                   
                                   relation: openapp.ns.role + "data",
                                   type: "my:ns:variableNote",
                                   //callback: window.location.reload();,
                                   onEach: function(variableNote) {
                                   variableNote.getRepresentation("rdfjson",function(r){
                                                                 
                                                                 
                                                                 var newRepresentation = {"text":r.text,
                                                                 "parentWidget":changedTo,
                                                                 "microType":r.microType,
                                                                 "elementTag":r.elementTag,
                                                                 "parentMicro":r.parentMicro,
                                                                 "elementType":r.elementType};
                                                                 
                                                                 if(changedWidget==r.parentWidget){
                                                                 //alert(r.text+" in "+changedWidget+" to "+changedTo);
                                                                 variableNote.setRepresentation(newRepresentation);
                                                                 
                                                                 //updateRender(changedTo);
  
                                                                 //microNote.del();
                                                                 
                                                                 }
                                                                 });
                                   }
                                   //window.location.reload();
                                   
                                   });
             
             //var resource = new openapp.oo.Resource("http://role-sandbox.eu/spaces/edittest/z1kgGqaQ1_");
             
             //setTimeout(function () { window.location.reload(); }, 3500);
             
             }
             
             
             
             function updateParentMicro(changedMicro,changedTo,newParentWidget){
             
             //$('#elementList').empty();
             
             space.getSubResources({
                                   
                                   relation: openapp.ns.role + "data",
                                   type: "my:ns:triggerNote",
                                   //callback: window.location.reload();,
                                   onEach: function(triggerNote) {
                                   triggerNote.getRepresentation("rdfjson",function(r){
                                                                 
                                                                 
                                                                 var newRepresentation = {"text":r.text,
                                                                 "parentWidget":newParentWidget,
                                                                 "microType":r.microType,
                                                                 "elementTag":r.elementTag,
                                                                 "parentMicro":changedTo,
                                                                 "elementType":r.elementType};
                                                                 
                                                                 if(changedMicro==r.parentMicro){
                                                                 //alert(r.text+" in "+changedWidget+" to "+changedTo);
                                                                 triggerNote.setRepresentation(newRepresentation);
                                                                 
                                                                 //microNote.del();
                                                                 
                                                                 }
                                                                 });
                                   }
                                   //window.location.reload();
                                   
                                   });
             
             
             space.getSubResources({
                                   
                                   relation: openapp.ns.role + "data",
                                   type: "my:ns:variableNote",
                                   //callback: window.location.reload();,
                                   onEach: function(variableNote) {
                                   variableNote.getRepresentation("rdfjson",function(r){
                                                                  
                                                                  
                                                                  var newRepresentation = {"text":r.text,
                                                                  "parentWidget":newParentWidget,
                                                                  "microType":r.microType,
                                                                  "elementTag":r.elementTag,
                                                                  "parentMicro":changedTo,
                                                                  "elementType":r.elementType};
                                                                  
                                                                  if(changedMicro==r.parentMicro){
                                                                  //alert(r.text+" in "+changedWidget+" to "+changedTo);
                                                                  variableNote.setRepresentation(newRepresentation);
                                                                  
                                                                  //updateRender(changedTo);
                                                                  
                                                                  //microNote.del();
                                                                  
                                                                  }
                                                                  });
                                   }
                                   //window.location.reload();
                                   
                                   });
             
             //var resource = new openapp.oo.Resource("http://role-sandbox.eu/spaces/edittest/z1kgGqaQ1_");
             
             //setTimeout(function () { window.location.reload(); }, 3500);
             
             }
      
            function renderNotes(){
             
             $('#elementList').empty();
             
             parentWidget="";
             parentMicro="";
             document.getElementById("parentWidget").innerHTML="All";
             document.getElementById("parentMicro").innerHTML="All";
             
             
             var hasChild = new Boolean(0);
             $('#elementList').append('<img src="http://dl.dropboxusercontent.com/u/48194107/Widgetizing/loadingelement.gif">');
             $('#elementList').append('<p class="text-muted">Loading Elements...</p>');

             
                space = new openapp.oo.Resource(openapp.param.space());
                space.getSubResources({
                
                    relation: openapp.ns.role + "data",
                    type: "my:ns:triggerNote",
                    onAll: function(data) {
                     if(data === null || data.length === 0){
                                      $("#elementList > img").remove();
                                      $("#elementList > p").remove();
                                      $('#elementList').append('<p class="text-muted">No elements identified</p>');
                                      }},
                    
                    onEach: function(triggerNote) {
                    triggerNote.getRepresentation("rdfjson",function(r){
                    if(triggerNote.uri!=null){
                         hasChild=true;
                                                  
                                                  }
                    var triggerElement = $("<button></button>").text(r.text);
                    triggerElement.addClass('btn btn-warning btn-sm');
                    triggerElement.attr('id', r.text);
                    triggerElement.attr('title', r.text);
                    triggerElement.on("click", function () {
                    selectTrigger(r.text, r.parentWidget,r.parentMicro, r.elementTag,r.elementType);
                                                            });
                    $("#elementList").append(triggerElement);
                                                  $("#elementList > img").remove();
                                                  $("#elementList > p").remove();
                                                  
                    if(hasChild==false){
                     $("#elementList > img").remove();
                     $("#elementList > p").remove();
                     $('#elementList').append('<p class="text-muted">There are no elements defined</p>');
                                                  }
                              
                    
                                });
                            }
                        });
                        
                space.getSubResources({
                        
                        relation: openapp.ns.role + "data",
                        type: "my:ns:variableNote",
                        onEach: function(variableNote) {
                        variableNote.getRepresentation("rdfjson",function(r){
                                                       
                        if(variableNote.uri!=null){
                        hasChild=true;
                                                       
                                                       }
                        var varElement = $("<button></button>").text(r.text);
                        varElement.addClass('btn btn-success btn-sm');
                        varElement.attr('id', r.text);
                        varElement.attr('title', r.elementTag+r.parentMicro+r.parentWidget+r.elementType);
                        varElement.on("click", function () {
                        selectVariable(r.text, r.parentWidget,r.parentMicro, r.elementTag,r.elementType);
                        });

                        $("#elementList").append(varElement);
                                                       $("#elementList > img").remove();
                                                       $("#elementList > p").remove();
                                                       
                                                       
                       if(hasChild==false){
                         $("#elementList > img").remove();
                         $("#elementList > p").remove();
                         $('#elementList').append('<p class="text-muted">There has no elements defined</p>');
                                                       }

                        });
                        }
                        });
			}
			
            
             function selectVariable(elementID, parentWidget,parentMicro,elementTag, elementType){
             
             publishVariableMessage();
             //alert(microService+" "+parentWidget);
             $('#microserviceList').empty();
             space = new openapp.oo.Resource(openapp.param.space());
             space.getSubResources({
                                   
                                   relation: openapp.ns.role + "data",
                                   type: "my:ns:variableNote",
                                   onEach: function(variableNote) {
                                   variableNote.getRepresentation("rdfjson",function(r){
                                        
                                            if(elementID==r.text){
                                                    
                                                    updateMicroList(r.parentMicro);
                                                       }
                                   });
                                   }
                                   });
             
             
             
             
             selectedElementID=elementID;
             document.getElementById("elementModeEdit").innerHTML=selectedElementID;
             $('#note').val(elementID);
             //$('#Grid/Table:last').removeClass("btn btn-default").addClass("btn btn-default active");
             //$('#Form:last').removeClass("btn btn-default active").addClass("btn btn-default");
             $('#elementTag').val(elementTag);
             
             if(editTrigger==false&&editVariable==false)
             {
             //$('#widgetList').toggle(400);
             $('#addVariable').toggle(400);
             $('#addTrigger').toggle(400);
             $('#updateVariable').toggle(400);
             $('#removeVariable').toggle(400);
             $('#closeEdit').toggle(400);
             $('#elementModeAdd').toggle(400);
             $('#elementModeEdit').toggle(400);
             $('#microserviceList').toggle(400);
             editVariable=true;
             }
             
             else if(editTrigger==true&&editVariable==false)
             {
             //$('#widgetList').toggle(400);
             $('#updateVariable').toggle(400);
             $('#updateTrigger').toggle(400);
             $('#removeTrigger').toggle(400);
             $('#removeVariable').toggle(400);
             editVariable=true;
             editTrigger=false;
             }

             
             
             }
             
             
             function selectTrigger(elementID, parentWidget,parentMicro,elementTag, elementType){
             
             //publishMessage(selectedMicroService,parentWidget);
             //alert(microService+" "+parentWidget);
             
             $('#microserviceList').empty();
             space = new openapp.oo.Resource(openapp.param.space());
             space.getSubResources({
                                   
                                   relation: openapp.ns.role + "data",
                                   type: "my:ns:triggerNote",
                                   onEach: function(triggerNote) {
                                   triggerNote.getRepresentation("rdfjson",function(r){
                                                                  
                                                                  if(elementID==r.text){
                                                                  
                                                                  updateMicroList(r.parentMicro);
                                                                  }
                                                                  });
                                   }
                                   });

             
             
             
             selectedElementID=elementID;
             document.getElementById("elementModeEdit").innerHTML=selectedElementID;
             $('#elementTag').val(elementTag);
             $('#note').val(elementID);
             
             
             publishTriggerMessage(elementID,parentWidget,parentMicro);
             //$('#Grid/Table:last').removeClass("btn btn-default").addClass("btn btn-default active");
             //$('#Form:last').removeClass("btn btn-default active").addClass("btn btn-default");
             
             
             if(editVariable==false&&editTrigger==false)
             {
             //$('#widgetList').toggle(400);
             $('#addTrigger').toggle(400);
             $('#addVariable').toggle(400);
             $('#updateTrigger').toggle(400);
             $('#removeTrigger').toggle(400);
             $('#closeEdit').toggle(400);
             $('#elementModeAdd').toggle(400);
             $('#elementModeEdit').toggle(400);
             $('#microserviceList').toggle(400);
             editVariable=false;
             editTrigger=true;
             }
             
             else if(editVariable==true&&editTrigger==false)
             {
             //$('#widgetList').toggle(400);
             $('#updateVariable').toggle(400);
             $('#updateTrigger').toggle(400);
             $('#removeTrigger').toggle(400);
             $('#removeVariable').toggle(400);
             editVariable=false;
             editTrigger=true;
             }
             
             }
             
             
             function removeTrigger(){
             
             //microService name to be deleted retrieved from text input
             //that contains "text" property of microNote representation
             
             space.getSubResources({
                                   
                                   relation: openapp.ns.role + "data",
                                   type: "my:ns:triggerNote",
                                   //callback: window.location.reload();,
                                   onEach: function(triggerNote) {
                                   triggerNote.getRepresentation("rdfjson",function(r){
                                                               
                                                               if(selectedElementID==r.text){
                                                               
                                                               //alert("Deleting " +r.text);
                                                               triggerNote.del();
                                                               
                                                               if(parentMicro==""&&parentWidget==""){
                                                                 renderNotes();
                                                                }
                                                                
                                                                else if(parentMicro!=""){
                                                                 updateRender(parentMicro);
                                                                 }
                                                                 
                                                                else if(parentMicro==""&&parentWidget!=""){
                                                                 updateRender(parentWidget);
                                                                 }
                                                                 
                                                                

                                                               closeEditMode();
                                                               }
                                                               });
                                   }
                                   //window.location.reload();
                                   
                                   });
             
             }
             
             function removeVariable(){
             
             //microService name to be deleted retrieved from text input
             //that contains "text" property of microNote representation
             
             space.getSubResources({
                                   
                                   relation: openapp.ns.role + "data",
                                   type: "my:ns:variableNote",
                                   //callback: window.location.reload();,
                                   onEach: function(variableNote) {
                                   variableNote.getRepresentation("rdfjson",function(r){
                                                                 
                                                                 if(selectedElementID==r.text){
                                                                 
                                                                 //alert("Deleting " +r.text);
                                                                 variableNote.del();
                                                                 
                                                                 if(parentMicro==""&&parentWidget==""){
                                                                 renderNotes();
                                                                 }
                                                                 
                                                                 else if(parentMicro!=""){
                                                                 updateRender(parentMicro);
                                                                 }
                                                                 
                                                                 else if(parentMicro==""&&parentWidget!=""){
                                                                 updateRender(parentWidget);
                                                                 }
                                                                 
                                                                 
                                                                 
                                                                 closeEditMode();
                                                                 }
                                                                 });
                                   }
                                   //window.location.reload();
                                   
                                   });
             
             //var resource = new openapp.oo.Resource("http://role-sandbox.eu/spaces/edittest/z1kgGqaQ1_");
             
             
             }
             
             
             function closeEditMode(){
                                      
                        if(editTrigger==true){
                         
                                      $('#addVariable').toggle(400);
                                      $('#updateTrigger').toggle(400);
                                      $('#removeTrigger').toggle(400);
                                      $('#addTrigger').toggle(400);
                                      $('#closeEdit').toggle(400);
                                      $('#note').val("");
                                      $('#elementModeAdd').toggle(400);
                                      $('#elementModeEdit').toggle(400);
                                      $('#microserviceList').toggle(400);
                                      
                                      
                        }
                                      
                        
                        else if(editVariable==true){
                                      
                                      $('#addVariable').toggle(400);
                                      $('#updateVariable').toggle(400);
                                      $('#removeVariable').toggle(400);
                                      $('#addTrigger').toggle(400);
                                      $('#closeEdit').toggle(400);
                                      $('#note').val("");
                                      $('#elementModeAdd').toggle(400);
                                      $('#elementModeEdit').toggle(400);
                                      $('#microserviceList').toggle(400);
                                      
                                      }
                                      
                                      
                                      editTrigger=false;
                                      editVariable=false;
                            
                            
                          //  $('#widgetList').toggle(400);
                            
                               }
             
             function updateRender(selectedParent){
             
             
             var hasChild=new Boolean(0);
             var hasChild2=new Boolean(0);
             
             $('#elementList').empty();
             $("#elementList > img").remove();
             $("#elementList > p").remove();
             
             $('#elementList').append('<img src="http://dl.dropboxusercontent.com/u/48194107/Widgetizing/loadingelement.gif">');
             $('#elementList').append('<p class="text-muted">Loading Elements of '+selectedParent+'...</p>');
             
             space = new openapp.oo.Resource(openapp.param.space());
             space.getSubResources({
                                   
                       relation: openapp.ns.role + "data",
                       type: "my:ns:triggerNote",
                       onAll: function(data) {
                                   if(data === null || data.length === 0){
                                   $("#elementList > img").remove();
                                   $("#elementList > p").remove();
                                   $('#elementList').append('<p class="text-muted">No elements identified</p>');
                                   }},
                       onEach: function(triggerNote) {
                       triggerNote.getRepresentation("rdfjson",function(r){
                                                     
                       if(selectedParent==r.parentMicro||selectedParent==r.parentWidget){
                       hasChild=true;
                       var triggerElement = $("<button></button>").text(r.text);
                       triggerElement.addClass('btn btn-warning btn-sm');
                       triggerElement.attr('id', r.text);
                       triggerElement.attr('title', r.text);
                       triggerElement.on("click", function () {
                       selectTrigger(r.text, r.parentWidget, r.parentMicro, r.elementTag,r.elementType);
                                   });
                                                     $("#elementList > img").remove();
                                                     $("#elementList > p").remove();
                      $("#elementList").append(triggerElement);
                                                     
                                   }
                       
                   if(hasChild==false&&hasChild2==false){
                                                     $("#elementList > img").remove();
                                                     $("#elementList > p").remove();
                            $('#elementList').append('<p class="text-muted">'+selectedParent+' has no elements</p>');
                                   }
                      
                                   });
                                   }
                                   });
             
             
             space.getSubResources({
                                   
                      relation: openapp.ns.role + "data",
                      type: "my:ns:variableNote",
                      onAll: function(data) {
                                   if(data === null || data.length === 0){
                                   $("#elementList > img").remove();
                                   $("#elementList > p").remove();
                                   $('#elementList').append('<p class="text-muted">No elements identified</p>');
                                   }},
                      onEach: function(variableNote) {
                      variableNote.getRepresentation("rdfjson",function(r){
                                                     
                      if(selectedParent==r.parentMicro||selectedParent==r.parentWidget){
                       
                      hasChild2=true;
                      
                      var varElement = $("<button></button>").text(r.text);
                      varElement.addClass('btn btn-success btn-sm');
                      varElement.attr('id', r.text);
                      varElement.attr('title', r.elementTag+r.parentMicro+r.parentWidget+r.elementType);
                      varElement.on("click", function () {
                      selectVariable(r.text, r.parentWidget, r.parentMicro, r.elementTag,r.elementType);
                      });
                      $("#elementList > img").remove();
                      $("#elementList > p").remove();
                      $("#elementList").append(varElement);
                                                     
                                   }
                                                     
                     else if(hasChild==false&&hasChild2==false){
                        $("#elementList > img").remove();
                        $("#elementList > p").remove();
                        $('#elementList').append('<p class="text-muted">'+selectedParent+' has no elements</p>');
                                            }
                                                     
                                   });
                                   }
                                   });
             
             }
             
			function updateMicroList(parentMicro){
             
             $('#microserviceList').empty();
             var parentlessOption=document.createElement("option");
             parentlessOption.text="--- Parent Micro-service ---";
             parentlessOption.selected="true";
             parentlessOption.value="";
             parentlessOption.disabled="true";
             microserviceList.add(parentlessOption);
 
             space.getSubResources({
                                   
                                   relation: openapp.ns.role + "data",
                                   type: "my:ns:microNote",
                                   onEach: function(microNote) {
                                   microNote.getRepresentation("rdfjson",function(r){
                                                               
                                                               var w = document.getElementById("microserviceList");
                                                               var option = document.createElement("option");
                                                               if(r.text==parentMicro){
                                                               option.selected="true";
                                                               }
                                                               
                                                               option.text =r.parentWidget+": "+r.text;
                                                               option.value=r.text;
                                                               option.id=r.text;
                                                               w.add(option);
                                                               $('#'+r.text).attr('parentWidget', r.parentWidget);
                                                               $('#'+r.text).attr('parentMicro', r.text);
                                                               
                                                               });
                                   }
                                   });
             
             }
             
             
			function publishResourceUpdate(uri){
				var intent = {		
					"component": "",
					"data":uri,
					"dataType":"text/json",		
					"action":"ACTION_UPDATE",
					"flags" :["PUBLISH_GLOBAL"],
					"extras" :{"ns":"my:ns:triggerNote","ns":"my:ns:variableNote"}
				};
				iwcClient.publish(intent);
			}
			
			function publishVariableMessage(){
				var intent = {		
					"component": "",
					"data":"www.example.com",
					"dataType":"text/json",		
					"action":"VARIABLE_SELECT",
					"flags" :["PUBLISH_GLOBAL"],
					"extras" :{}
				};
				iwcClient.publish(intent);
			}
             
            
             function publishTriggerMessage(parentTrigger,parentWidget,parentMicro){
             var intent = {
             "component": "",
             "data":"www.example.com",
             "dataType":"text/json",
             "action":"TRIGGER_SELECT",
             "flags" :["PUBLISH_GLOBAL"],
             "extras" :{"parentTrigger":parentTrigger,"widgetID":parentWidget,"parentWidget":parentWidget, "parentMicro":parentMicro}
             };
             iwcClient.publish(intent);
             }
             
             
             function publishTriggerChangeMessage(changedTrigger, changedTo, newParentWidget,newParentMicro){
             var intent = {
             "component": "",
             "data":"www.example.com",
             "dataType":"text/json",
             "action":"TRIGGER_CHANGE",
             "flags" :["PUBLISH_GLOBAL"],
             "extras" :{"changedTrigger":changedTrigger,"changedTo":changedTo, "newParentWidget":newParentWidget, "newParentMicro":newParentMicro}
             
             };
             
             iwcClient.publish(intent);
             }
             

             
            
		</script>
		
		<!-- HTML Block -->
        
             <div align="center" style="height:25px;">
             <div style="padding-top:0px;">
             <span  class="label label-default" id="parentWidget">All</span>
             <span  class="label label-danger" id="parentMicro">All</span>
             <a style="float:right; position:absolute; right:5px; top:0px; cursor: pointer;" title="Show All" onclick="renderNotes()"><span class="glyphicon glyphicon-repeat"></span></a>
             </div>
             </div>
        
        
        
        <div align="center" id="elementList" style="overflow:auto; max-height:100px; height:100px;"></div>
        
        
        <div id="linearBg1" align="center" class="alert alert-warning">
             
             <button id="closeEdit" style="display:none;" type="button" class="close btn-sm" aria-hidden="true" onclick="closeEditMode();">&times;</button>
        <h4 id="elementModeAdd" style="color:#FFFFCC;" align="center">Add</h4>
        <h4 id="elementModeEdit" style="display:none; color:#FFFFCC;" align="center">Update</h4>
        <span><small id="statusMessage"></small></span>

        
        <div class="input-group">
        <span class="input-group-btn">
        <button id="removeVariable" style="display:none;" type="button" class="btn btn-link" onClick="removeVariable()" title="Remove Selected Variable">
             &zwnj;<span class="glyphicon glyphicon-trash"></span>
             </button>
             
        <button id="updateTrigger" style="display:none;" type="button" class="btn btn-warning" onClick="updateTrigger()" title="Update Trigger">
             &zwnj;<span class="glyphicon glyphicon-refresh"></span>
        </button>
        <button id="addTrigger" type="button" class="btn btn-warning" onClick="addTrigger()" title="Add Trigger">
        &zwnj;<span class="glyphicon glyphicon-plus"></span>
        </button>
        </span>
        <input type="text" id="note" class="form-control" placeholder="&#8592; Trigger &#124;&#124; Variable ID &#8594;"/>
        <span class="input-group-btn">
        <button id="updateVariable" style="display:none;" type="button" class="btn btn-success" onClick="updateVariable()" title="Update">
             &zwnj;<span class="glyphicon glyphicon-refresh"></span>
        </button>
        <button id="addVariable" type="button" class="btn btn-success" onClick="addVariable()" title="Add Variable">
        &zwnj;<span class="glyphicon glyphicon-plus"></span>
        </button>
        
        <button id="removeTrigger" style="display:none;" type="button" class="btn btn-link" onClick="removeTrigger()" title="Remove Selected Trigger">
             &zwnj;<span class="glyphicon glyphicon-trash"></span>
             </button>
        </span>
        </div>
        
             <select id="microserviceList" style="display:none;" class="form-control input-sm">
             <option disabled selected>MicroList</option>
             </select>
            
            <select id="elementTag" class="form-control input-sm">
            <option value="" disabled selected>Tag</option>
            <optgroup label="Common Triggers">
            <option value="button">&lt;button&gt;</option>
            <option value="input/submit">&lt;input type="submit"&gt;</option>
            <option value="a">&lt;a&gt;</option>
            </optgroup>
            <optgroup label="Common User Inputs">
            <option value="input/text">&lt;input type="text"&gt;</option>
            <option value="input/checkbox">&lt;input type="checkbox"&gt;</option>
            <option value="input/color">&lt;input type="color"&gt;</option>
            <option value="input/date">&lt;input type="date"&gt;</option>
            <option value="select/option">&lt;option&gt;</option>
            <option value="input/datetime">&lt;input type="datetime"&gt;</option>
            <option value="input/datetime-local">&lt;input type="datetime-local"&gt;</option>
            <option value="input/email">&lt;input type="email"&gt;</option>
            <option value="input/image">&lt;input type="image"&gt;</option>
            <option value="input/password">&lt;input type="password"&gt;</option>
            <option value="input/radio">&lt;input type="radio</option"&gt;>
            <option value="input/range">&lt;input type="range"&gt;</option>
            <option value="input/search">&lt;input type="search"&gt;</option>
            <option value="input/time">&lt;input type="time"&gt;</option>
            <option value="input/url">&lt;input type="url"&gt;</option>
            <option value="input/week">&lt;input type="week"&gt;</option>
            </optgroup>
            <optgroup label="List/Table/Display Items">
             <option value="td">&lt;td&gt; (table column)</option>
             <option value="tr">&lt;td&gt; (table row)</option>
             <option value="li">&lt;ol&gt; (list item)</option>
             <option value="div">&lt;div&gt;</option>
             <option value="p">&lt;p&gt;</option>
            </optgroup>
            <optgroup label="Other">
            <option value="other">Back-end Data</option>
            <option value="APIdata">External API Data</option>
            
            </select>

            </div>

        
        <script src="js/bootstrap.min.js"></script>
        <script src="http://code.jquery.com/jquery.min.js"></script>
        <script src="http://getbootstrap.com/dist/js/bootstrap.js"></script>
        
        
        
	]]>
  </Content>
</Module>